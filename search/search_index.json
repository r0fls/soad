{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SOAD Documentation Welcome to the SOAD project documentation. Overview SOAD (System Of A Dow) is a Python package designed to simplify the process of developing and testing algorithmic trading strategies. Author : Raphael Deem Repository : GitHub Table of Contents Installation Usage Deploying Infrastructure Contributing","title":"Home"},{"location":"#overview","text":"SOAD (System Of A Dow) is a Python package designed to simplify the process of developing and testing algorithmic trading strategies. Author : Raphael Deem Repository : GitHub","title":"Overview"},{"location":"#table-of-contents","text":"Installation Usage Deploying Infrastructure Contributing","title":"Table of Contents"},{"location":"contributing/","text":"Contributing We welcome contributions to the SOAD project. Here are some ways you can help: Report bugs Fix issues Add new features Improve documentation How to Contribute Setup a python virtual environment python -m pyenv python3.12 Install the required packages: pip install -r requirements.txt Initialize the database with fake data: python init_db.py Start the frontend (React) server Create a file called /trading-dashboard/.env.local with this line: REACT_APP_API_URL=http://localhost:8000 To prevent package.json from unexpectedly changing set this environment variable: COREPACK_ENABLE_AUTO_PIN=0 Then: cd trading-dashboard yarn start Start the python API (in a second terminal window) python main.py --mode api Code of Conduct If you have any problems getting, feel free to create a Github issue. Please follow our Code of Conduct .","title":"Contributing"},{"location":"contributing/#contributing","text":"We welcome contributions to the SOAD project. Here are some ways you can help: Report bugs Fix issues Add new features Improve documentation","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"Setup a python virtual environment python -m pyenv python3.12 Install the required packages: pip install -r requirements.txt Initialize the database with fake data: python init_db.py Start the frontend (React) server Create a file called /trading-dashboard/.env.local with this line: REACT_APP_API_URL=http://localhost:8000 To prevent package.json from unexpectedly changing set this environment variable: COREPACK_ENABLE_AUTO_PIN=0 Then: cd trading-dashboard yarn start Start the python API (in a second terminal window) python main.py --mode api","title":"How to Contribute"},{"location":"contributing/#code-of-conduct","text":"If you have any problems getting, feel free to create a Github issue. Please follow our Code of Conduct .","title":"Code of Conduct"},{"location":"deploying-infrastructure/","text":"Deploying to Kubernetes The Basics Here is an example Github Action that deploys the SOAD trading system helm chart to a Digital Ocean Kubernetes cluster. This action is triggered when a new release is created. The action will install the helm chart and update the deployment with the new image. It should be nearly identical for other cloud providers. Make sure to replace the DO_KUBECONFIG secret with your own DigitalOcean Kubernetes cluster kubeconfig. values.yaml is your own values file for the helm chart (see example). name: Deploy to DigitalOcean Kubernetes on: workflow_dispatch: push: branches: - main jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v2 - name: Install kubectl run: | curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\" chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl - name: Install Helm run: | curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash - name: Set up kubeconfig run: | mkdir -p $HOME/.kube echo \"${{ secrets.DO_KUBECONFIG }}\" > $HOME/.kube/config chmod 600 $HOME/.kube/config - name: Deploy with Helm env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} run: | git clone https://github.com/r0fls/soad.git cd soad/helm-chart helm repo add stable https://charts.helm.sh/stable helm repo update helm dependency build helm upgrade --install trading-system . -f ../../values.yaml Configuring Ingress and Cert Manager Additionally, if you want a public domain with SSH you can deploy the ingress-nginx controller and cert-manager to your cluster. Here is an example of how to do that: name: Deploy Infra to DigitalOcean Kubernetes on: workflow_dispatch: jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v2 - name: Install kubectl run: | curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\" chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl - name: Install Helm run: | curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash - name: Set up kubeconfig run: | mkdir -p $HOME/.kube echo \"${{ secrets.DO_KUBECONFIG }}\" > $HOME/.kube/config chmod 600 $HOME/.kube/config - name: Deploy ingress nginx with Helm run: | helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx --set controller.publishService.enabled=true - name: Deploy Cert Manager run: | helm repo add jetstack https://charts.jetstack.io helm repo update kubectl create namespace cert-manager | echo \"Cert manager namespace already exists\" kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.11.0/cert-manager.crds.yaml helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.8.0 - name: Deploy YAML run: | kubectl create -f do-k8s/ Releasing A Custom Trading Image Finally, here is an example of releasing the custom trading image containing your strategies to the Kubernetes cluster. NOTE: you will need to have the trading image pointing to the image in your private registry, and the pullSecret configured to allow access from the cluster. name: Release Trading Image on: workflow_dispatch: push: branches: - main jobs: build-and-push: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v2 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v1 - name: Install doctl run: | curl -sL https://github.com/digitalocean/doctl/releases/download/v1.64.0/doctl-1.64.0-linux-amd64.tar.gz | tar -xzv sudo mv doctl /usr/local/bin - name: Authenticate doctl run: doctl auth init -t ${{ secrets.DO_API_TOKEN }} - name: Log in to DigitalOcean Container Registry run: echo \"${{ secrets.DO_API_TOKEN }}\" | docker login registry.digitalocean.com -u \"doctl\" --password-stdin - name: Lint Strategy files with flake8 run: | # Stop the build if there are Python syntax errors or undefined names pip install flake8 flake8 soad-deploy/ --count --select=E9,F63,F7,F82 --show-source --statistics - name: Build and push Docker image uses: docker/build-push-action@v2 with: context: ./soad-deploy/ file: ./soad-deploy/Dockerfile tags: registry.digitalocean.com/<YOUR_REGISTRY>/soad-trading-system:latest push: true cache-from: type=local,src=/tmp/.buildx-cache cache-to: type=local,dest=/tmp/.buildx-cache build-args: | BUILDKIT_INLINE_CACHE=1 - name: Install kubectl run: | curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\" chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl - name: Set up kubeconfig run: | mkdir -p $HOME/.kube echo \"${{ secrets.DO_KUBECONFIG }}\" > $HOME/.kube/config chmod 600 $HOME/.kube/config - name: Deploy to Kubernetes run: kubectl delete pod -l app.kubernetes.io/name=system-of-a-dow,component=trading --namespace default","title":"Deploying Infrastructure"},{"location":"deploying-infrastructure/#deploying-to-kubernetes","text":"","title":"Deploying to Kubernetes"},{"location":"deploying-infrastructure/#the-basics","text":"Here is an example Github Action that deploys the SOAD trading system helm chart to a Digital Ocean Kubernetes cluster. This action is triggered when a new release is created. The action will install the helm chart and update the deployment with the new image. It should be nearly identical for other cloud providers. Make sure to replace the DO_KUBECONFIG secret with your own DigitalOcean Kubernetes cluster kubeconfig. values.yaml is your own values file for the helm chart (see example). name: Deploy to DigitalOcean Kubernetes on: workflow_dispatch: push: branches: - main jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v2 - name: Install kubectl run: | curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\" chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl - name: Install Helm run: | curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash - name: Set up kubeconfig run: | mkdir -p $HOME/.kube echo \"${{ secrets.DO_KUBECONFIG }}\" > $HOME/.kube/config chmod 600 $HOME/.kube/config - name: Deploy with Helm env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} run: | git clone https://github.com/r0fls/soad.git cd soad/helm-chart helm repo add stable https://charts.helm.sh/stable helm repo update helm dependency build helm upgrade --install trading-system . -f ../../values.yaml","title":"The Basics"},{"location":"deploying-infrastructure/#configuring-ingress-and-cert-manager","text":"Additionally, if you want a public domain with SSH you can deploy the ingress-nginx controller and cert-manager to your cluster. Here is an example of how to do that: name: Deploy Infra to DigitalOcean Kubernetes on: workflow_dispatch: jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v2 - name: Install kubectl run: | curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\" chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl - name: Install Helm run: | curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash - name: Set up kubeconfig run: | mkdir -p $HOME/.kube echo \"${{ secrets.DO_KUBECONFIG }}\" > $HOME/.kube/config chmod 600 $HOME/.kube/config - name: Deploy ingress nginx with Helm run: | helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx helm repo update helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx --set controller.publishService.enabled=true - name: Deploy Cert Manager run: | helm repo add jetstack https://charts.jetstack.io helm repo update kubectl create namespace cert-manager | echo \"Cert manager namespace already exists\" kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.11.0/cert-manager.crds.yaml helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.8.0 - name: Deploy YAML run: | kubectl create -f do-k8s/","title":"Configuring Ingress and Cert Manager"},{"location":"deploying-infrastructure/#releasing-a-custom-trading-image","text":"Finally, here is an example of releasing the custom trading image containing your strategies to the Kubernetes cluster. NOTE: you will need to have the trading image pointing to the image in your private registry, and the pullSecret configured to allow access from the cluster. name: Release Trading Image on: workflow_dispatch: push: branches: - main jobs: build-and-push: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v2 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v1 - name: Install doctl run: | curl -sL https://github.com/digitalocean/doctl/releases/download/v1.64.0/doctl-1.64.0-linux-amd64.tar.gz | tar -xzv sudo mv doctl /usr/local/bin - name: Authenticate doctl run: doctl auth init -t ${{ secrets.DO_API_TOKEN }} - name: Log in to DigitalOcean Container Registry run: echo \"${{ secrets.DO_API_TOKEN }}\" | docker login registry.digitalocean.com -u \"doctl\" --password-stdin - name: Lint Strategy files with flake8 run: | # Stop the build if there are Python syntax errors or undefined names pip install flake8 flake8 soad-deploy/ --count --select=E9,F63,F7,F82 --show-source --statistics - name: Build and push Docker image uses: docker/build-push-action@v2 with: context: ./soad-deploy/ file: ./soad-deploy/Dockerfile tags: registry.digitalocean.com/<YOUR_REGISTRY>/soad-trading-system:latest push: true cache-from: type=local,src=/tmp/.buildx-cache cache-to: type=local,dest=/tmp/.buildx-cache build-args: | BUILDKIT_INLINE_CACHE=1 - name: Install kubectl run: | curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\" chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl - name: Set up kubeconfig run: | mkdir -p $HOME/.kube echo \"${{ secrets.DO_KUBECONFIG }}\" > $HOME/.kube/config chmod 600 $HOME/.kube/config - name: Deploy to Kubernetes run: kubectl delete pod -l app.kubernetes.io/name=system-of-a-dow,component=trading --namespace default","title":"Releasing A Custom Trading Image"},{"location":"installation/","text":"Installation Prerequisites Python 3.12 or higher pip (Python package installer) Installation Steps Clone the repository: git clone https://github.com/r0fls/soad.git cd soad Install the required dependencies: pip install -r requirements.txt Install the package: python setup.py install","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#prerequisites","text":"Python 3.12 or higher pip (Python package installer)","title":"Prerequisites"},{"location":"installation/#installation-steps","text":"Clone the repository: git clone https://github.com/r0fls/soad.git cd soad Install the required dependencies: pip install -r requirements.txt Install the package: python setup.py install","title":"Installation Steps"},{"location":"usage/","text":"Usage Guide Getting Started To really get started with trading live strategies, you will likely need to deploy the infrastructure to run your strategies. This can be done in a number of ways, but the most common is to use a cloud provider like AWS, GCP, Digital Ocean or Azure. See the Deploying Infrastructure section for an example. Writing Custom Strategies To write a custom strategy, you will need to create a new Python file in the strategies directory. This file should contain a class that inherits from the Strategy class in strategies/strategy.py . The class should implement the run method, which is called every time the strategy is run. The run method should return a list of orders to be executed. See the Writing Custom Strategies section for more information. Running Strategies To run a custom strategy, you can build a custom docker image that inherits from the soad base image. This image should contain your custom strategy file and any dependencies that are required. You can then deploy this image to a cloud provider and run it using a container orchestration tool like Kubernetes. See the Deploying Infrastructure section for an example. To run a single strategy, you can use the main.py entrypoint with the --strategy flag. This needs to reference key in your strategies portion of your config file. For example, to run the example strategy, you would run the following command: python main.py --strategy flying_bird Assuming your config file has a strategies section that looks like this: strategies: flying_bird: type: \"constant_percentage\" broker: \"tradier\" # Name of the broker starting_capital: 200 # Capital allocated to this strategy stock_allocations: TSLL: 1 cash_percentage: 0.5 rebalance_interval_minutes: 5","title":"Usage"},{"location":"usage/#usage-guide","text":"","title":"Usage Guide"},{"location":"usage/#getting-started","text":"To really get started with trading live strategies, you will likely need to deploy the infrastructure to run your strategies. This can be done in a number of ways, but the most common is to use a cloud provider like AWS, GCP, Digital Ocean or Azure. See the Deploying Infrastructure section for an example.","title":"Getting Started"},{"location":"usage/#writing-custom-strategies","text":"To write a custom strategy, you will need to create a new Python file in the strategies directory. This file should contain a class that inherits from the Strategy class in strategies/strategy.py . The class should implement the run method, which is called every time the strategy is run. The run method should return a list of orders to be executed. See the Writing Custom Strategies section for more information.","title":"Writing Custom Strategies"},{"location":"usage/#running-strategies","text":"To run a custom strategy, you can build a custom docker image that inherits from the soad base image. This image should contain your custom strategy file and any dependencies that are required. You can then deploy this image to a cloud provider and run it using a container orchestration tool like Kubernetes. See the Deploying Infrastructure section for an example. To run a single strategy, you can use the main.py entrypoint with the --strategy flag. This needs to reference key in your strategies portion of your config file. For example, to run the example strategy, you would run the following command: python main.py --strategy flying_bird Assuming your config file has a strategies section that looks like this: strategies: flying_bird: type: \"constant_percentage\" broker: \"tradier\" # Name of the broker starting_capital: 200 # Capital allocated to this strategy stock_allocations: TSLL: 1 cash_percentage: 0.5 rebalance_interval_minutes: 5","title":"Running Strategies"}]}